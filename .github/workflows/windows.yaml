 build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    permissions:
      actions: write
    needs: [vars]
    env:
      MSYS: "winsymlinks:native"

      msystem: CLANG64
      note: "ucrt-x86_64-standalone"
      upload_prefix: "windows-mingw-w64"

    steps:
      - name: Prepare
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.msystem }}
          update: true
          # installing vim for xxd
          install: >-
            base-devel file wget vim
          pacboy: >-
            xz:p lz4:p bzip2:p zlib:p pkgconf:p clang:p
            lld:p cmake:p libc++:p ninja:p rust:p

      - name: Synchronize (source)
        uses: yogeshlonkar/wait-for-jobs@v0.2.1
        with:
          jobs: 'Prepare (source)'

      - name: Prepare (source)
        uses: actions/download-artifact@v4
        with:
          name: srcpkg

      - name: Build
        shell: msys2 {0}
        run: |
          echo -e "\n### extract source ###\n"
          tar -xf magiskboot_*-src.tar.xz

          cd magiskboot_*-src/

          echo -e "\n### configure ###\n"
          CC=clang CXX=clang++ cmake -G Ninja -B build \
              -DCMAKE_BUILD_TYPE=${{ needs.vars.outputs.cmake_build_type }} \
              -DCMAKE_EXE_LINKER_FLAGS=" ${{ needs.vars.outputs.lto_ldflags }}" \
              -DPREFER_STATIC_LINKING=ON -DFULL_RUST_LTO=${{ needs.vars.outputs.full_lto }}

          echo -e "\n### build ###\n"
          cmake --build build -j $(nproc) -v
          strip build/magiskboot*.exe

          file build/magiskboot*.exe
          ldd build/magiskboot*.exe
          ./build/magiskboot*.exe || true
          rm -rf $GITHUB_WORKSPACE/${{ env.progname }}-out && mkdir -p $GITHUB_WORKSPACE/${{ env.progname }}-out
          cp -afv build/magiskboot*.exe $GITHUB_WORKSPACE/${{ env.progname }}-out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ env.progname }}-${{ needs.vars.outputs.short_sha }}-${{ needs.vars.outputs.build_type }}-${{ env.upload_prefix }}-${{ env.note }}
          path: ${{ github.workspace }}/${{ env.progname }}-out/magiskboot*.exe

      - name: Check
        shell: msys2 {0}
        run: |
          cd magiskboot_*-src/
          find $GITHUB_WORKSPACE/${{ env.progname }}-out -name magiskboot\*.exe -exec ./scripts/magiskboot_test.sh {} +

      # Fail fast
      - name: Cancel other jobs
        if: failure()
        uses: andymckay/cancel-action@0.4

  build-windows-cross:
    name: Build (Windows) (Cross)
    runs-on: ubuntu-latest
    permissions:
      actions: write
    needs: [vars]
    strategy:
      matrix:
        include:
          - crt: msvcrt
            upload_suffix: "i686-standalone"
            cmake_arch: x86
            cc: i686-w64-mingw32-clang
            cxx: i686-w64-mingw32-clang++
            strip: i686-w64-mingw32-strip
            vcpkg_triplet: x86-mingw-static
            rust_target: i686-pc-windows-gnu
            build_rust_std: "OFF"

          - crt: ucrt
            upload_suffix: "arm64-standalone"
            cmake_arch: aarch64
            cc: aarch64-w64-mingw32-clang
            cxx: aarch64-w64-mingw32-clang++
            strip: aarch64-w64-mingw32-strip

            # XXX: what? why this wasn't detected by Corrosion automatically?
            ldlibs: "-lbcrypt"

            vcpkg_triplet: arm64-mingw-static
            rust_target: aarch64-pc-windows-gnullvm
            build_rust_std: "ON"
    env:
      toolchain_url: https://github.com/mstorsjo/llvm-mingw/releases/download
      toolchain_ver: 20240404
      upload_prefix: "windows-mingw-w64"

    steps:
      - name: Prepare (Host)
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y curl wget tar file \
                                        build-essential pkg-config cmake ninja-build

      - name: Cache (LLVM MinGW)
        id: cache-llvm-mingw
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/${{ env.progname }}-llvm-mingw
          key: llvm-mingw-${{ env.toolchain_ver }}-${{ matrix.crt }}-${{ runner.os }}

      - name: Prepare (LLVM MinGW)
        if: steps.cache-llvm-mingw.outputs.cache-hit != 'true'
        run: |
          rm -rf ${{ env.progname }}-llvm-mingw.tar.xz $GITHUB_WORKSPACE/${{ env.progname }}-llvm-mingw
          wget ${{ env.toolchain_url }}/${{ env.toolchain_ver }}/llvm-mingw-${{ env.toolchain_ver }}-${{ matrix.crt }}-ubuntu-20.04-x86_64.tar.xz \
                -O ${{ env.progname }}-llvm-mingw.tar.xz
          mkdir -p $GITHUB_WORKSPACE/${{ env.progname }}-llvm-mingw
          tar -x -f ${{ env.progname }}-llvm-mingw.tar.xz -C $GITHUB_WORKSPACE/${{ env.progname }}-llvm-mingw --strip-components=1
          rm -f ${{ env.progname }}-llvm-mingw.tar.xz

      - name: Prepare (PATH)
        run: |
          echo "$GITHUB_WORKSPACE/${{ env.progname }}-llvm-mingw/bin" | tee -a $GITHUB_PATH

      - name: Prepare (Environment)
        run: |
          echo "vcpkg_root=$VCPKG_INSTALLATION_ROOT" | tee -a $GITHUB_ENV

      - name: Cache (Cross)
        id: cache-cross-vcpkgs
        uses: actions/cache@v4
        with:
          path: ${{ env.vcpkg_root }}/installed
          key: cross-vcpkgs-v2-${{ matrix.vcpkg_triplet }}-llvm-mingw-${{ env.toolchain_ver }}-${{ matrix.crt }}

      - name: Prepare (Cross)
        run: |
          vcpkg install --host-triplet=${{ matrix.vcpkg_triplet }} zlib liblzma lz4 'bzip2[core]'

      - name: Prepare (Rust)
        if: matrix.build_rust_std == 'OFF'
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y

      - name: Prepare (Nightly Rust)
        if: matrix.build_rust_std == 'ON'
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly

      - name: Prepare (Rust STD)
        if: matrix.build_rust_std == 'OFF'
        run: |
          . "$HOME/.cargo/env"
          rustup target add ${{ matrix.rust_target }}

      - name: Prepare (Rust source)
        if: matrix.build_rust_std == 'ON'
        run: |
          . "$HOME/.cargo/env"
          rustup component add rust-src

      - name: Synchronize (source)
        uses: yogeshlonkar/wait-for-jobs@v0.2.1
        with:
          jobs: 'Prepare (source)'

      - name: Prepare (source)
        uses: actions/download-artifact@v4
        with:
          name: srcpkg

      - name: Build
        run: |
          echo -e "\n### extract source ###\n"
          tar -xf magiskboot_*-src.tar.xz

          cd magiskboot_*-src/

          echo -e "\n### configure ###\n"
          . "$HOME/.cargo/env"
          CC=${{ matrix.cc }} CXX=${{ matrix.cxx }} cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=${{ needs.vars.outputs.cmake_build_type }} \
                    -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.cmake_arch }} -DCMAKE_SYSTEM_NAME=Windows \
                    -DCMAKE_EXE_LINKER_FLAGS=" ${{ matrix.ldlibs }} ${{ needs.vars.outputs.lto_ldflags }}" \
                    -DRust_CARGO_TARGET=${{ matrix.rust_target }} -DRUST_BUILD_STD=${{ matrix.build_rust_std }} -DPREFER_STATIC_LINKING=ON \
                    -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake \
                    -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} -DMINGW=TRUE \
                    -DFULL_RUST_LTO=${{ needs.vars.outputs.full_lto }}

          echo -e "\n### build ###\n"
          cmake --build build -j $(nproc) -v
          ${{ matrix.strip }} build/magiskboot*.exe

          file build/magiskboot*.exe
          strings build/magiskboot*.exe | grep -iE '^(\w|[-.])*\.dll$'
          rm -rf $GITHUB_WORKSPACE/${{ env.progname }}-out && mkdir -p $GITHUB_WORKSPACE/${{ env.progname }}-out
          cp -afv build/magiskboot*.exe $GITHUB_WORKSPACE/${{ env.progname }}-out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ env.progname }}-${{ needs.vars.outputs.short_sha }}-${{ needs.vars.outputs.build_type }}-${{ env.upload_prefix }}-${{ matrix.crt }}-${{ matrix.upload_suffix }}
          path: ${{ github.workspace }}/${{ env.progname }}-out/magiskboot*.exe

      # Fail fast
      - name: Cancel other jobs
        if: failure()
        uses: andymckay/cancel-action@0.4
